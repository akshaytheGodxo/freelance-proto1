generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accountType   String
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    employer      Employer?
    freelancer    Freelancer?
    notifications Notification[]
}

model Employer {
    id          String     @id @default(cuid())
    companyName String
    userId      String     @unique
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    jobPosts    Post[]
    requests    Requests[]  // ✅ Added: Requests sent by the employer
    currentProjects Projects[]
    payment      Payment[]
}

model Freelancer {
    id          String       @id @default(cuid())
    userId      String       @unique
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    name        String
    rating      Float
    rate        Float
    experience  Int
    projects    Int
    skills      String[]
    education   String
    avatar      String
    bg          String
    createdAt   DateTime  @default(now())
    payment     Payment[]
    appliedJobs AppliedJob[]
    requests    Requests[]
    currentProjects Projects[]
    notifications Notification[] // ✅ Now connected to notifications
}

model Requests {
    id           String     @id @default(cuid())
    freelancerId String
    employerId   String

    freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
    employer     Employer   @relation(fields: [employerId], references: [id], onDelete: Cascade)


    amount       Int
    deadline     String     @default("per-month")
    title        String 
    message      String
    status       String     @default("pending")  // "pending", "accepted", "rejected"
    createdAt    DateTime   @default(now())
}



model Projects {
    id           String     @id @default(cuid())
    freelancerId String
    employerId   String
    title        String
    description  String
    amount       Int
    deadline     String
    status       String     @default("in-progress") // "in-progress", "completed"
    createdAt    DateTime   @default(now())

    freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
    employer     Employer   @relation(fields: [employerId], references: [id], onDelete: Cascade)
    milestones   Milestone[]
}

model Milestone {
    id           String   @id @default(cuid())
    projectId    String
    description  String
    deadline     DateTime
    amount       Int
    status       String   @default("pending") // "pending", "completed"
    project      Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
    payment      Payment[]
}

model Payment {
  id          String   @id @default(cuid())
  milestoneId String   @unique
  freelancerId String
  employerId  String
  amount      Int
  status      String   @default("pending") // "pending", "completed"
  createdAt   DateTime @default(now())

  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  freelancer  Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  employer    Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)
}

model Notification {
  id            String     @id @default(cuid())
  userId        String?
  freelancerId  String?
  message       String
  status        String     @default("unread") // "unread", "read"
  createdAt     DateTime   @default(now())

  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  freelancer    Freelancer? @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
}


model AppliedJob {
    id           String      @id @default(cuid())
    freelancerId String
    postId       Int
    freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
    post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
    id          Int        @id @default(autoincrement())
    name        String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    createdById String
    createdBy   User      @relation(fields: [createdById], references: [id])  // Fixed reference

    appliedJobs AppliedJob[]
    employee    Employer[]
    @@index([name])
}

// Necessary for NextAuth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? 
    access_token             String? 
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? 
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
