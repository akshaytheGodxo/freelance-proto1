generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    employer      Employer?
    freelancer    Freelancer?
}

model Employer {
    id          String  @id @default(cuid())
    companyName String
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    jobPosts    Post[]
}

model Freelancer {
    id          String  @id @default(cuid())
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    skills      String[]
    appliedJobs AppliedJob[]
}

model AppliedJob {
    id           String      @id @default(cuid())
    freelancerId String
    postId       Int
    freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
    post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
    id        Int        @id @default(autoincrement())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    createdById String
    createdBy   Employer @relation(fields: [createdById], references: [id])

    appliedJobs AppliedJob[]

    user User[]

    @@index([name])
}

// Necessary for NextAuth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? 
    access_token             String? 
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? 
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
